apiVersion: cluster.x-k8s.io/v1beta1
kind: ClusterClass
metadata:
  name: vsphere-kubeadm-example
spec:
  controlPlane:
    ref:
      apiVersion: controlplane.cluster.x-k8s.io/v1beta1
      kind: KubeadmControlPlaneTemplate
      name: vsphere-kubeadm-example-controlplane
    machineInfrastructure:
      ref:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        name: vsphere-kubeadm-example-controlplane
  infrastructure:
    ref:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: VSphereClusterTemplate
      name: vsphere-kubeadm-example
  workers:
    machineDeployments:
    - class: vsphere-kubeadm-example-worker
      template:
        bootstrap:
          ref:
            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
            kind: KubeadmConfigTemplate
            name: vsphere-kubeadm-example-worker
        infrastructure:
          ref:
            apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
            kind: VSphereMachineTemplate
            name: vsphere-kubeadm-example-worker
  variables:
  - name: sshKey
    required: false
    schema:
      openAPIV3Schema:
        description: Public key to SSH onto the cluster nodes.
        type: string
  - name: controlPlaneIpAddr
    required: true
    schema:
      openAPIV3Schema:
        description: Floating VIP for the control plane.
        type: string
  - name: controlPlanePort
    required: true
    schema:
      openAPIV3Schema:
        description: Port for the control plane endpoint.
        type: integer
  - name: kubeVIPInterface
    required: true
    schema:
      openAPIV3Schema:
        description: The interface name used by kube-vip in ARP mode.
        type: string
        default: eth0
  - name: vSphereTLSThumbprint
    required: true
    schema:
      openAPIV3Schema:
        description: "sha256 thumbprint of the vcenter certificate: openssl x509 -sha256 -fingerprint -in ca.crt -noout"
        type: string
  - name: vSphereClusterIdentityName
    required: true
    schema:
      openAPIV3Schema:
        description: The VSphereClusterIdentity resource name referencing the credentials to create the Cluster.
        type: string
        default: cluster-identity
  - name: vSphereServer
    required: true
    schema:
      openAPIV3Schema:
        description: The vCenter server IP or FQDN.
        type: string
  - name: vSphereDataCenter
    required: true
    schema:
      openAPIV3Schema:
        description: The vSphere datacenter to deploy the Cluster on.
        type: string
  - name: vSphereResourcePool
    required: true
    schema:
      openAPIV3Schema:
        description: The vSphere resource pool for your VMs.
        type: string
  - name: vSphereDataStore
    required: true
    schema:
      openAPIV3Schema:
        description: The vSphere datastore to deploy the Cluster on.
        type: string
  - name: vSphereNetwork
    required: true
    schema:
      openAPIV3Schema:
        description: The VM network to deploy the Cluster on.
        type: string
  - name: vSphereFolder
    required: true
    schema:
      openAPIV3Schema:
        description: The VM folder for your VMs. Set to "" to use the root vSphere folder.
        type: string
  - name: vSphereTemplate
    required: true
    schema:
      openAPIV3Schema:
        description: The VM template to use for your Cluster.
        type: string
  patches:
  - name: infraCluster
    definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/controlPlaneEndpoint
        valueFrom:
          template: |
            host: '{{ .controlPlaneIpAddr }}'
            port: {{ .controlPlanePort }}
      - op: add
        path: /spec/template/spec/identityRef/name
        valueFrom:
          variable: vSphereClusterIdentityName
      - op: add
        path: /spec/template/spec/server
        valueFrom:
          variable: vSphereServer
      - op: add
        path: /spec/template/spec/thumbprint
        valueFrom:
          variable: vSphereTLSThumbprint
      selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereClusterTemplate
        matchResources:
          infrastructureCluster: true
  - name: vsphereMachineTemplate
    definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec
        valueFrom:
          template: |
            cloneMode: linkedClone
            datacenter: '{{ .vSphereDataCenter }}'
            datastore: '{{ .vSphereDataStore }}'
            diskGiB: 25
            folder: '{{ .vSphereFolder }}'
            memoryMiB: 8192
            network:
              devices:
              - dhcp4: true
                networkName: '{{ .vSphereNetwork }}'
            numCPUs: 2
            os: Linux
            powerOffMode: trySoft
            resourcePool: '{{ .vSphereResourcePool }}'
            server: '{{ .vSphereServer }}'
            storagePolicyName: ''
            template: '{{ .vSphereTemplate }}'
      selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          controlPlane: true
    - jsonPatches:  
      - op: add
        path: /spec/template/spec
        valueFrom:
          template: |
            cloneMode: linkedClone
            datacenter: '{{ .vSphereDataCenter }}'
            datastore: '{{ .vSphereDataStore }}'
            diskGiB: 25
            folder: '{{ .vSphereFolder }}'
            memoryMiB: 8192
            network:
              devices:
              - dhcp4: true
                networkName: '{{ .vSphereNetwork }}'
            numCPUs: 2
            os: Linux
            powerOffMode: trySoft
            resourcePool: '{{ .vSphereResourcePool }}'
            server: '{{ .vSphereServer }}'
            storagePolicyName: ''
            template: '{{ .vSphereTemplate }}'
      selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          machineDeploymentClass:
            names: 
            - vsphere-kubeadm-example-worker
  - name: kubeadmControlPlaneTemplate
    definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files
        valueFrom:
          template: |
            - path: "/etc/kubernetes/manifests/kube-vip.yaml"
              owner: "root:root"
              permissions: "0640"
              content: |
                apiVersion: v1
                kind: Pod
                metadata:
                  creationTimestamp: null
                  name: kube-vip
                  namespace: kube-system
                spec:
                  containers:
                  - args:
                    - manager
                    env:
                    - name: vip_arp
                      value: "true"
                    - name: port
                      value: "{{ .controlPlanePort }}"
                    - name: vip_nodename
                      valueFrom:
                        fieldRef:
                          fieldPath: spec.nodeName
                    - name: vip_interface
                      value: "{{ .kubeVIPInterface }}"
                    - name: vip_subnet
                      value: "32"
                    - name: dns_mode
                      value: first
                    - name: cp_enable
                      value: "true"
                    - name: cp_namespace
                      value: kube-system
                    - name: svc_enable
                      value: "true"
                    - name: svc_leasename
                      value: plndr-svcs-lock
                    - name: vip_leaderelection
                      value: "true"
                    - name: vip_leasename
                      value: plndr-cp-lock
                    - name: vip_leaseduration
                      value: "5"
                    - name: vip_renewdeadline
                      value: "3"
                    - name: vip_retryperiod
                      value: "1"
                    - name: address
                      value: "{{ .controlPlaneIpAddr }}"
                    - name: prometheus_server
                      value: :2112
                    image: ghcr.io/kube-vip/kube-vip:v0.9.1
                    imagePullPolicy: IfNotPresent
                    name: kube-vip
                    resources: {}
                    securityContext:
                      capabilities:
                        add:
                        - NET_ADMIN
                        - NET_RAW
                        drop:
                        - ALL
                    volumeMounts:
                    - mountPath: /etc/kubernetes/admin.conf
                      name: kubeconfig
                    - mountPath: /etc/hosts
                      name: etchosts
                  hostAliases:
                  - hostnames:
                    - kubernetes
                    ip: 127.0.0.1
                  hostNetwork: true
                  volumes:
                  - hostPath:
                      path: /etc/kubernetes/admin.conf
                    name: kubeconfig
                  - hostPath:
                      path: /etc/kube-vip.hosts
                    name: etchosts
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            content: 127.0.0.1 localhost kubernetes
            owner: root:root
            path: /etc/kube-vip.hosts
            permissions: "0644"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            content: |
              #!/bin/bash

              # Copyright 2020 The Kubernetes Authors.
              #
              # Licensed under the Apache License, Version 2.0 (the "License");
              # you may not use this file except in compliance with the License.
              # You may obtain a copy of the License at
              #
              #     http://www.apache.org/licenses/LICENSE-2.0
              #
              # Unless required by applicable law or agreed to in writing, software
              # distributed under the License is distributed on an "AS IS" BASIS,
              # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
              # See the License for the specific language governing permissions and
              # limitations under the License.

              set -e

              # Configure the workaround required for kubeadm init with kube-vip:
              # xref: https://github.com/kube-vip/kube-vip/issues/684

              # Nothing to do for kubernetes < v1.29
              KUBEADM_MINOR="$(kubeadm version -o short | cut -d '.' -f 2)"
              if [[ "$KUBEADM_MINOR" -lt "29" ]]; then
                exit 0
              fi

              IS_KUBEADM_INIT="false"

              # cloud-init kubeadm init
              if [[ -f /run/kubeadm/kubeadm.yaml ]]; then
                IS_KUBEADM_INIT="true"
              fi

              # ignition kubeadm init
              if [[ -f /etc/kubeadm.sh ]] && grep -q -e "kubeadm init" /etc/kubeadm.sh; then
                IS_KUBEADM_INIT="true"
              fi

              if [[ "$IS_KUBEADM_INIT" == "true" ]]; then
                sed -i 's#path: /etc/kubernetes/admin.conf#path: /etc/kubernetes/super-admin.conf#' \
                  /etc/kubernetes/manifests/kube-vip.yaml
              fi
            owner: root:root
            path: /etc/pre-kubeadm-commands/50-kube-vip-prepare.sh
            permissions: "0700"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/users
        valueFrom:
          template: |
            - name: capv
              sshAuthorizedKeys:
              - '{{ .sshKey }}'
              sudo: ALL=(ALL) NOPASSWD:ALL
      selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
  - name: kubeadmConfigTemplate
    definitions:
    - jsonPatches:
      - op: add
        path: /spec/template/spec/users
        valueFrom:
          template: |
            - name: capv
              sshAuthorizedKeys:
              - '{{ .sshKey }}'
              sudo: ALL=(ALL) NOPASSWD:ALL
      selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - vsphere-kubeadm-example-worker
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: VSphereClusterTemplate
metadata:
  name: vsphere-kubeadm-example
spec:
  template:
    spec:
      identityRef:
        kind: VSphereClusterIdentity
        name: cluster-identity
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlaneTemplate
metadata:
  name: vsphere-kubeadm-example-controlplane
spec:
  template:
    spec:
      kubeadmConfigSpec:
        clusterConfiguration:
          controllerManager:
            extraArgs:
              cloud-provider: external
        initConfiguration:
          nodeRegistration:
            criSocket: /var/run/containerd/containerd.sock
            kubeletExtraArgs:
              cloud-provider: external
            name: '{{ local_hostname }}'
        joinConfiguration:
          nodeRegistration:
            criSocket: /var/run/containerd/containerd.sock
            kubeletExtraArgs:
              cloud-provider: external
            name: '{{ local_hostname }}'
        preKubeadmCommands:
        - hostnamectl set-hostname "{{ ds.meta_data.hostname }}"
        - echo "::1         ipv6-localhost ipv6-loopback localhost6 localhost6.localdomain6" >/etc/hosts
        - echo "127.0.0.1   {{ ds.meta_data.hostname }} {{ local_hostname }} localhost localhost.localdomain localhost4 localhost4.localdomain4" >>/etc/hosts
        - mkdir -p /etc/pre-kubeadm-commands
        - for script in $(find /etc/pre-kubeadm-commands/ -name '*.sh' -type f | sort); do echo "Running script $script"; "$script"; done
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: vsphere-kubeadm-example-worker
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
          kubeletExtraArgs:
            cloud-provider: external
          name: '{{ local_hostname }}'
      preKubeadmCommands:
      - hostnamectl set-hostname "{{ ds.meta_data.hostname }}"
      - echo "::1         ipv6-localhost ipv6-loopback localhost6 localhost6.localdomain6" >/etc/hosts
      - echo "127.0.0.1   {{ ds.meta_data.hostname }} {{ local_hostname }} localhost localhost.localdomain localhost4 localhost4.localdomain4" >>/etc/hosts
      - mkdir -p /etc/pre-kubeadm-commands
      - for script in $(find /etc/pre-kubeadm-commands/ -name '*.sh' -type f | sort); do echo "Running script $script"; "$script"; done
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: VSphereMachineTemplate
metadata:
  name: vsphere-kubeadm-example-controlplane
spec:
  template:
    # Hardcoded values will not be respected.
    # Configure everything via patch.
    spec:
      template: 'set-by-patch'
      network:
       devices: []
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: VSphereMachineTemplate
metadata:
  name: vsphere-kubeadm-example-worker
spec:
  template:
    # Hardcoded values will not be respected.
    # Configure everything via patch.
    spec:
      template: 'set-by-patch'
      network:
       devices: []
